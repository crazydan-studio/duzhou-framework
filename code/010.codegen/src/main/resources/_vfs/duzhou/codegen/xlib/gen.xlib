<?xml version="1.0" encoding="UTF-8" ?>
<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef"
     xmlns:c="c" xmlns:thisLib="thisLib"
     x:schema="/nop/schema/xlib.xdef"
>
    <tags>
        <!-- 生成 OrmModel 的 ext 扩展属性（在反向解析时，需要从 app.orm.xml 中再次使用的变量） -->
        <GenOrmModelExtAttrs outputMode="none">
            <attr name="app" />
            <attr name="appModule" />

            <source>
                <c:script><![CDATA[
                    const registerShortName = true;
                    const moduleCode1 = app.code1;
                    const moduleCode2 = appModule.code.replaceAll('-', '_');
                    const moduleId = moduleCode1 + '/' + moduleCode2;
                    const moduleName = moduleCode1 + '-' + moduleCode2;
                    const moduleMavenArtifactId = moduleCode2.replaceAll('_', '-');
                    const moduleBasePackageName = app.maven.groupId + '.' + moduleCode2;

                    return {
                        'ext:useCoreModule': false,
                        'ext:webStarterType': appModule.webStarterType || 'undertow',
                        'ext:dialect': appModule.dbDialect,
                        'ext:entityTableNamePrefix': appModule.entityTableNamePrefix,

                        'ext:mavenVersion': app.version,
                        'ext:mavenGroupId': app.maven.groupId,
                        'ext:mavenArtifactId': moduleMavenArtifactId,
                        'ext:mavenArtifactIdPrefix': moduleCode1.replaceAll('_', '-') + '-',
                        'ext:mavenParentVersion': app.maven.version,
                        'ext:mavenParentGroupId': app.maven.groupId,
                        'ext:mavenParentArtifactId': app.maven.artifactId,
                        // 若为独立工程，则设置空字符串
                        'ext:mavenParentRelativePath': '../pom.xml',

                        'ext:moduleId': moduleId,
                        'ext:moduleName': moduleName,
                        'ext:moduleCode1': moduleCode1,
                        'ext:moduleCode2': moduleCode2,
                        'ext:moduleDisplayName': appModule.displayName,
                        'ext:moduleDescription': appModule.description,
                        // 用于命名 *.beans.xml 文件
                        'ext:moduleBeansName': moduleMavenArtifactId,
                        'ext:moduleClassPrefix': moduleId.replace('/','_').$camelCase(true),
                        'ext:moduleClassShortPrefix': moduleCode2.$camelCase(true),

                        'ext:registerShortName': registerShortName,
                        'ext:basePackageName': moduleBasePackageName,
                        'ext:entityPackageName': moduleBasePackageName + '.orm.entity',
                    };
                ]]></c:script>
            </source>
        </GenOrmModelExtAttrs>

        <MavenPomMerge outputMode="xml">
            <attr name="resource" type="io.nop.core.resource.IResource" />

            <slot name="default" outputMode="node" />

            <source>
                <c:choose>
                    <when test="${resource.length() > 0}">
                        <c:script><![CDATA[
                            import io.nop.core.resource.ResourceHelper;

                            const deltaNode = eval_node(slot_default).child(0);
                            const targetNode = ResourceHelper.readXml(resource);

                            xpl('thisLib:_DoDeltaMerge', {
                                defaultXDefPath: '/duzhou/schema/app/maven-pom.xdef',
                                targetNode,
                                deltaNode,
                            });

                            targetNode.output($out);
                        ]]></c:script>
                    </when>
                    <otherwise>
                        <c:script><![CDATA[
                            const targetNode = eval_node(slot_default).child(0);
                            targetNode.output($out);
                        ]]></c:script>
                    </otherwise>
                </c:choose>
            </source>
        </MavenPomMerge>

        <DeltaMerge outputMode="xml">
            <attr name="targetNode" type="io.nop.core.lang.xml.XNode" />

            <slot name="default" outputMode="node" />

            <source>
                <c:script><![CDATA[
                    const deltaNode = eval_node(slot_default).child(0);

                    xpl('thisLib:_DoDeltaMerge', {targetNode, deltaNode});

                    targetNode.output($out);
                ]]></c:script>
            </source>
        </DeltaMerge>

        <_DoDeltaMerge>
            <attr name="defaultXDefPath" optional="true" type="String" />
            <attr name="deltaNode" type="io.nop.core.lang.xml.XNode" />
            <attr name="targetNode" type="io.nop.core.lang.xml.XNode" />

            <source>
                <c:script><![CDATA[
                    import io.nop.xlang.delta.DeltaMerger;
                    import io.nop.xlang.xmeta.SchemaLoader;
                    import io.nop.xlang.xdsl.XDslKeys;
                    import io.crazydan.duzhou.framework.commons.DeltaMergerHelper;

                    let xdefPath = targetNode.getAttr('x:schema');
                    if (xdefPath == null) {
                        xdefPath = defaultXDefPath;
                    }

                    const xdef = SchemaLoader.loadXDefinition(xdefPath);
                    const keys = XDslKeys.of(targetNode);

                    const merger = new DeltaMerger(keys);
                    merger.merge(targetNode, deltaNode, xdef.getRootNode(), false);

                    DeltaMergerHelper.cleanNode(targetNode);
                ]]></c:script>
            </source>
        </_DoDeltaMerge>
    </tags>
</lib>
