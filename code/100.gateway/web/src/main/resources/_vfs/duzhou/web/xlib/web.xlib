<?xml version="1.0" encoding="UTF-8" ?>

<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef"
     xmlns:c="c" xmlns:xpl="xpl" xmlns:thisLib="thisLib"
     x:schema="/nop/schema/xlib.xdef"
>
    <tags>
        <!--
        站点 html 生成函数。
        Note：输出模式 html 为文本，只有 node 才是节点树
        @site [必填] 待转换为 html 的站点对象
        -->
        <GenSiteHtml outputMode="node">
            <attr name="site" mandatory="true" />

            <source>
                <c:include src="impl/site_html.xpl" />
            </source>
        </GenSiteHtml>

        <!--
        默认的站点 html 页面的 <title/> 生成函数
        @site [必填] 待转换为 html 的站点对象
        -->
        <GenSiteTitle>
            <attr name="site" mandatory="true" />

            <!--
            Note：在 source 内的文本内容与其子节点 c:script 的写法和作用相同，
            可直接通过 return 返回当前函数的执行结果（文本内容不能使用 ${} 引用变量）。
            若返回 node 或 xjson 等结构，则需在 c:script 中进行运算，
            再在 source 内嵌入节点标签并通过 ${} 引用 c:script 中定义的变量
            -->
            <source><![CDATA[
                return site.subTitle + ' | ' + site.title;
            ]]></source>
            <!-- 另一种定义方式 -->
            <!--<source>
                <c:script><![CDATA[
                    return site.subTitle + ' | ' + site.title;
                ]]></c:script>
            </source>-->
            <!-- 错误使用：解析会失败 -->
            <!--<source>${site.subTitle + ' | ' + site.title}</source>-->
        </GenSiteTitle>

        <!--
        生成图片的 data url
        @path [必填] 图片的资源路径
        -->
        <GenImageDataUrl>
            <attr name="path" mandatory="true" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.framework.gateway.core.utils.WebStaticResourcesHelper;

                    return WebStaticResourcesHelper.getImageDataUrl(path);
                ]]></c:script>
            </source>
        </GenImageDataUrl>

        <!--
        根据站点资源列表构造 AMIS 的 App 组件的 pages 配置数据
        @resources [必填] 站点资源列表
        -->
        <GenAmisAppPages>
            <attr name="resources" />

            <source>
                <c:script><![CDATA[
                    return resources.map((resource) => _.filterNull({
                        label: resource.displayName,
                        // AMIS 默认采用 Font Awesome 6 Free 图标
                        // https://fontawesome.com/v6/icons?o=r&m=free
                        icon: resource.icon,
                        url: resource.id,
                        schemaApi: resource.url,
                        children: resource.children && !resource.children.isEmpty()
                            ? xpl('thisLib:GenAmisAppPages', resource.children)
                            : null
                    }));
                ]]></c:script>
            </source>
        </GenAmisAppPages>

        <!--
        遍历所有 Web 站点的资源，并更新资源页面 url
        以采用 /graphql 的端点获取页面结构。
        该函数直接修改当前已解析的 DSL 节点
        -->
        <UpdateWebSiteResourceUrl outputMode="node">
            <!--  _dsl_root 为元编程阶段可访问的 DSL 根节点 -->
            <attr name="_dsl_root" implicit="true" />

            <source>
                <web>
                    <c:for items="${_dsl_root.childrenByTag('site')}" var="site">
                        <site id="${site.attrText('id')}" xpl:if="site.hasChild('resources')">
                            <resources>
                                <thisLib:_PatchSiteResourcesUrl
                                        resources="${site.childByTag('resources').children}" />
                            </resources>
                        </site>
                    </c:for>
                </web>
            </source>
        </UpdateWebSiteResourceUrl>

        <_PatchSiteResourcesUrl outputMode="node">
            <attr name="resources" />

            <source>
                <c:script><![CDATA[
                    function genPageUrl(path) {
                        if (path == null || path.isEmpty()) {
                            return path;
                        }
                        return '@query:PageProvider__getPage?path=' + path;
                    }
                ]]></c:script>

                <c:for items="${resources}" var="resource">
                    <resource id="${resource.attrText('id')}"
                              url="${genPageUrl(resource.attrText('url'))}">
                        <children xpl:if="resource.hasChild('children')">
                            <thisLib:_PatchSiteResourcesUrl
                                    resources="${resource.childByTag('children').children}" />
                        </children>
                    </resource>
                </c:for>
            </source>
        </_PatchSiteResourcesUrl>
    </tags>
</lib>
