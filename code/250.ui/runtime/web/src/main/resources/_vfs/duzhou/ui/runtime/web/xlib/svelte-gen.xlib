<?xml version="1.0" encoding="UTF-8" ?>
<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef"
     xmlns:c="c" xmlns:xpl="xpl" xmlns:thisLib="thisLib"
     x:schema="/nop/schema/xlib.xdef"
     x:extends="svelte-native-gen.xlib"
>
    <tags>
        <GenComponent outputMode="html">
            <!-- 隐式传递上下文中的全局变量，在需要引用的地方均需显式声明 -->
            <attr name="genConfig"
                  type="io.crazydan.duzhou.framework.ui.runtime.web.XuiGenConfig"
                  implicit="true" />

            <attr name="forPage" type="Boolean" />
            <attr name="component"
                  type="io.crazydan.duzhou.framework.ui.schema.XuiComponent" />

            <source>
                <script lang="ts">
                    <thisLib:GenComponentImports
                            component="${component}" />

                    <c:if test="${forPage}" xpl:outputMode="text"><![CDATA[
                        import { onPageMount } from '${'$'}lib/common/page.js';
                        import { onMount } from 'svelte';

                        onMount(onPageMount);
                    ]]></c:if>

                    <c:if test="${!forPage}" xpl:outputMode="text"><![CDATA[
                        const props = $props();
                        const { children } = props;
                    ]]></c:if>
                </script>

                <_ xpl:is="${forPage ? 'main' : 'div'}"
                   class="xui-block"
                >
                    <thisLib:GenComponentNode
                            component="${component}"
                            node="${component.template}" />
                </_>

                <style>
                </style>
            </source>
        </GenComponent>

        <GenComponentImports outputMode="text">
            <!-- 隐式传递上下文中的全局变量，在需要引用的地方均需显式声明 -->
            <attr name="genConfig"
                  type="io.crazydan.duzhou.framework.ui.runtime.web.XuiGenConfig"
                  implicit="true" />

            <attr name="component"
                  type="io.crazydan.duzhou.framework.ui.schema.XuiComponent" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.framework.ui.runtime.web.XuiGenHelper;

                    let dirs = XuiGenHelper.genLibImportDirectives(component, '$lib', '.svelte');
                    $out.text(location(), dirs);

                    dirs = XuiGenHelper.genLayoutImportDirectives(component, '$lib', '.svelte');
                    $out.text(location(), dirs);
                ]]></c:script>
            </source>
        </GenComponentImports>

        <GenComponentNode outputMode="html">
            <!-- 隐式传递上下文中的全局变量，在需要引用的地方均需显式声明 -->
            <attr name="genConfig"
                  type="io.crazydan.duzhou.framework.ui.runtime.web.XuiGenConfig"
                  implicit="true" />

            <attr name="component"
                  type="io.crazydan.duzhou.framework.ui.schema.XuiComponent" />
            <attr name="node"
                  type="io.crazydan.duzhou.framework.ui.schema.component.XuiComponentNode" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.framework.ui.schema.component.XuiComponentNested;

                    const layouts = node instanceof XuiComponentNested
                        ? node.children.filter(child => child.$type == 'xui:layout')
                        : [];
                    const children = node instanceof XuiComponentNested
                        ? node.children.filter(child => child.$type != 'xui:layout')
                        : [node];
                    const conditionalLayouts = layouts.size() > 1;
                ]]></c:script>

                <c:choose>
                    <when test="${!layouts.isEmpty()}">
                        <c:for var="layout" items="${layouts}" index="index">
                            <c:script><![CDATA[
                                import io.crazydan.duzhou.framework.ui.runtime.web.XuiGenHelper;
                                import io.nop.commons.util.StringHelper;

                                const layoutNode = layout.type.root;
                                const layoutType = layout.type.$type;
                                const layoutName = XuiGenHelper.LAYOUT_IMPORT_NAME_PREFIX
                                                    + StringHelper.camelCase(layoutType, '-', true);
                                const layoutAttrs = {};
                            ]]></c:script>

                            <c:if test="${conditionalLayouts}">
                                <c:if test="${index == 0}" xpl:outputMode="text"><![CDATA[
                                    {#if ${layout['xui:when']}}
                                ]]></c:if>
                                <c:if test="${index > 0}" xpl:outputMode="text"><![CDATA[
                                    {:else if ${layout['xui:when']}}
                                ]]></c:if>
                            </c:if>

                            <!-- Note: xpl:is 中必须是动态表达式才会在运行时输出，否则，变量名会被作为标签直接输出 -->
                            <_ xpl:is="${layoutName + ''}"
                               xpl:attrs="layoutAttrs"
                            >
                                <thisLib:GenComponentNodeLayout
                                        component="${component}"
                                        node="${node}"
                                        layout="${layoutNode}"
                                        layoutNamePrefix="${layoutName + '_'}" />
                            </_>
                        </c:for>

                        <c:if test="${conditionalLayouts}" xpl:outputMode="text"><![CDATA[
                            {/if}
                        ]]></c:if>
                    </when>
                    <otherwise>
                        <c:for var="child" items="${children}">
                            <thisLib:GenComponentNamed
                                    component="${component}"
                                    named="${child}" />
                        </c:for>
                    </otherwise>
                </c:choose>
            </source>
        </GenComponentNode>

        <GenComponentNamed outputMode="html">
            <!-- 隐式传递上下文中的全局变量，在需要引用的地方均需显式声明 -->
            <attr name="genConfig"
                  type="io.crazydan.duzhou.framework.ui.runtime.web.XuiGenConfig"
                  implicit="true" />

            <attr name="component"
                  type="io.crazydan.duzhou.framework.ui.schema.XuiComponent" />
            <attr name="named"
                  type="io.crazydan.duzhou.framework.ui.schema.component.XuiComponentNamed" />

            <source>
                <c:choose>
                    <!-- 构建 组件指令 -->
                    <when test="${named.$type == 'xui:style'}">
                        <div />
                    </when>
                    <when test="${named.$type == 'xui:dispatch'}">
                        <div />
                    </when>
                    <when test="${named.$type == 'xui:each'}">
                        <div />
                    </when>
                    <when test="${named.$type == 'xui:when'}">
                        <div />
                    </when>

                    <!-- 构建组件节点 -->
                    <otherwise>
                        <c:script><![CDATA[
                            const nativeType = component.getNodeNativeType(named);
                            const attrs = component.getNodeAttrs(named);
                        ]]></c:script>

                        <!-- 构建原生组件节点 -->
                        <c:script xpl:if="nativeType != null"><![CDATA[
                            import io.crazydan.duzhou.framework.ui.runtime.web.XuiGenHelper;

                            const ret = XuiGenHelper.callGenNativeTag(
                                location(), $scope, nativeType,
                                { component, node: named }
                            );
                            $out.text(location(), ret);
                        ]]></c:script>

                        <!-- 构建自定义组件节点，并保持组件名不变（注意，Svelte 组件名的首字母必须大写） -->
                        <!-- TODO 处理 xui:when -->
                        <!-- TODO 直接展开组件属性 -->
                        <_ xpl:is="${named.$type}"
                           xpl:if="nativeType == null"
                           xpl:attrs="attrs"
                        >
                            <thisLib:GenComponentNode
                                    component="${component}"
                                    node="${named}" />
                        </_>
                    </otherwise>
                </c:choose>
            </source>
        </GenComponentNamed>

        <GenComponentNodeLayout outputMode="html">
            <!-- 隐式传递上下文中的全局变量，在需要引用的地方均需显式声明 -->
            <attr name="genConfig"
                  type="io.crazydan.duzhou.framework.ui.runtime.web.XuiGenConfig"
                  implicit="true" />

            <attr name="component"
                  type="io.crazydan.duzhou.framework.ui.schema.XuiComponent" />
            <attr name="node"
                  type="io.crazydan.duzhou.framework.ui.schema.component.XuiComponentNode" />
            <attr name="layout"
                  type="io.crazydan.duzhou.framework.ui.schema.layout.XuiLayoutNode" />
            <attr name="layoutNamePrefix" type="String" />

            <source>
                <c:script><![CDATA[
                    import io.nop.commons.util.StringHelper;
                    import io.crazydan.duzhou.framework.ui.runtime.web.XuiGenHelper;

                    const layoutName = layoutNamePrefix + StringHelper.camelCase(layout.type.name(), true);
                    const layoutAttrs = XuiGenHelper.genLayoutNodeAttrs(layout, genConfig);
                ]]></c:script>
                <c:choose>
                    <when test="${layout.type.name() == 'item'}">
                        <c:script><![CDATA[
                            const children = node.findLayoutChild(layout);
                        ]]></c:script>

                        <c:for var="child" items="${children}">
                            <_ xpl:is="${layoutName + ''}"
                               xpl:attrs="layoutAttrs"
                            >
                                <thisLib:GenComponentNamed
                                        component="${component}"
                                        named="${child}" />
                            </_>
                        </c:for>
                    </when>
                    <otherwise>
                        <_ xpl:is="${layoutName + ''}"
                           xpl:attrs="layoutAttrs"
                        >
                            <c:for var="layoutChild" items="${layout.children}">
                                <c:choose>
                                    <when test="${layout.type.name() == 'table'}">
                                        <!-- 应用原生的表格元素做表格布局 -->
                                        <tr>
                                            <c:for var="columnLayout" items="${layoutChild.children}">
                                                <c:script><![CDATA[
                                                    const span = columnLayout.props.span;
                                                    const tdAttrs = span ? {
                                                        rowspan: span.col && '{' + span.col + '}',
                                                        colspan: span.row && '{' + span.row + '}',
                                                    } : {};
                                                ]]></c:script>
                                                <td xpl:attrs="tdAttrs">
                                                    <thisLib:GenComponentNodeLayout
                                                            component="${component}"
                                                            node="${node}"
                                                            layout="${columnLayout}"
                                                            layoutNamePrefix="${layoutNamePrefix}" />
                                                </td>
                                            </c:for>
                                        </tr>
                                    </when>
                                    <otherwise>
                                        <thisLib:GenComponentNodeLayout
                                                component="${component}"
                                                node="${node}"
                                                layout="${layoutChild}"
                                                layoutNamePrefix="${layoutNamePrefix}" />
                                    </otherwise>
                                </c:choose>
                            </c:for>
                        </_>
                    </otherwise>
                </c:choose>
            </source>
        </GenComponentNodeLayout>
    </tags>
</lib>
