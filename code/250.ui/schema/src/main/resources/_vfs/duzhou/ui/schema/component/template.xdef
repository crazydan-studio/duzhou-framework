<?xml version="1.0" encoding="UTF-8" ?>

<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<!-- 组件模板定义 -->
<template xmlns:x="/nop/schema/xdsl.xdef" xmlns:xdef="xdef"
          xmlns:xui="xui"
          x:schema="/nop/schema/xdef.xdef" xdef:check-ns="xui"
          xdef:name="XuiComponentTemplate" xdef:ref="XuiComponentNode"
          xdef:bean-package="io.crazydan.duzhou.framework.ui.schema.component"
          xui:when="~string" name="~conf-name"
>

    <!-- 组件命名元素

    @name [必填] 组件组成元素的名字，其将作为差量运算的定位坐标，在相同父节点范围内具备唯一性。
          一般采用 `{业务数据名}-{组件类型名}` 形式命名；
    @xui:when [可选] 组件元素有效的条件，以 `${xxx}` 形式表示其值，且在其值为 `true` 时，该组件元素才有效；
    -->
    <xdef:define xdef:name="XuiComponentNamed"
                 xdef:bean-tag-prop="$type"
                 xui:when="string"
                 name="conf-name" />

    <xdef:define xdef:name="XuiComponentNested" xdef:ref="XuiComponentNamed"
                 xdef:body-type="list" xdef:key-attr="name"
                 xdef:bean-body-prop="children" xdef:bean-child-name="child"
                 xdef:bean-body-type="List&lt;io.crazydan.duzhou.framework.ui.schema.component.XuiComponentNamed>"
                 xdef:bean-sub-type-prop="$type"
    >
        <!-- Start: 内置组件 -->
        <!-- 将内置组件定义在基础节点中，以支持在 xui:each、xui:when 等嵌套节点中定义这些类型的直接节点 -->

        <!-- 文本组件：只包含文本内容的组件 -->
        <Text xdef:name="XuiComponentText" xdef:ref="XuiComponentNamed"
              xdef:value="string" xdef:bean-body-prop="value"
              xdef:unknown-attr="any"
              xui:style="string"
              name="!conf-name" />

        <!-- 校验组件：可自嵌套，从而支持分层校验 -->
        <!-- 根据校验模型的校验结果，以红色边框和浮动提示方式标记校验失败的输入区域 -->
        <!-- 仅在目标的值 value 发生变化时才根据校验结果显示提示信息，其余状态则不做处理 -->
        <Validation xdef:name="XuiComponentValidation" xdef:ref="XuiComponentNested"
                    name="!conf-name" target="!string" />

        <!-- 动画组件：可自嵌套，从而支持一组动画 -->
        <Animation xdef:name="XuiComponentAnimation" xdef:ref="XuiComponentNested"
                   name="!conf-name" enter="string" exit="string" />
        <!-- End: 内置组件 -->

        <xdef:unknown-tag xdef:ref="XuiComponentNode"
                          name="!conf-name" />
    </xdef:define>

    <xdef:define xdef:name="XuiComponentDirective" xdef:ref="XuiComponentNested" />

    <!-- 组件（树）节点

    @props [可选] 以对象形式向组件传递属性，其最终将被展开并合并到组件对象的属性列表中；
    -->
    <xdef:define xdef:name="XuiComponentNode" xdef:ref="XuiComponentNested"
                 xdef:unknown-attr="any" props="any"
    >
        <!-- 除非应用了 xui:when 条件，否则，最多只有一个 xui:layout 和 xui:style 节点 -->
        <xui:layout xdef:ref="XuiComponentLayout"
                    name="!conf-name=xui-layout" />
        <xui:style xdef:ref="XuiComponentStyle"
                   name="!conf-name=xui-style" />

        <!-- 缺省使用 for 属性的值作为节点唯一键值（定位坐标），也就是，一个消息仅定义一个节点 -->
        <xui:dispatch xdef:ref="XuiComponentMessageDispatch"
                      name="!conf-name=@attr:for" />

        <!-- Start: 组件指令 -->
        <xui:each xdef:name="XuiComponentDirectiveEach" xdef:ref="XuiComponentDirective"
                  name="!conf-name"
                  for="!var-name" item="!var-name" index="var-name" />
        <xui:when xdef:name="XuiComponentDirectiveWhen" xdef:ref="XuiComponentDirective"
                  xui:when="~string"
                  name="!conf-name"
                  cond="!string" />
        <!-- End: 组件指令 -->
    </xdef:define>

    <!-- 组件布局
    - 布局将影响运行时的节点嵌套关系，从而保证布局的准确性；
    - 仅用于控制所在组件中的直接视图组件（Validation、Animation 为逻辑组件）；
    -->
    <xdef:define xdef:name="XuiComponentLayout" xdef:ref="XuiComponentNamed"
                 xdef:body-type="union"
                 xdef:bean-body-type="io.crazydan.duzhou.framework.ui.schema.XuiLayout"
                 xdef:bean-body-prop="type"
                 xdef:bean-sub-type-prop="$type"
    >
        <!-- 使用文本标记指示布局
        - [comp]: 指代 name 为 comp 的组件；
        - <: 表示左对齐；
        - >: 表示右对齐；
        - ^: 表示顶部对齐；
        - v: 表示底部对齐；
        - <[comp]>: 表示使组件 comp 水平占满剩余空间，若未指定组件，则以空白占满剩余空间；
        - >[comp]<: 表示使组件 comp 水平居中对齐；
        - ^[comp]v: 表示使组件 comp 垂直占满剩余空间；
        - v[comp]^: 表示使组件 comp 垂直居中对齐；
        - [comp1] [comp2]: 表示左右放置组件 comp1 和 comp2；
        - [comp1] | [comp2]: 表示左右放置组件 comp1 和 comp2；
        - [comp1]\n[comp2]: 表示上下放置组件 comp1 和 comp2，其中，\n 为换行符，实际不可见，效果为上下两行；
        - {xxx}: 表示布局嵌套，可在内部反复应用前面的规则，或者将其视为一个整体，可对其应用水平和垂直布局；
        - 组件尺寸（宽高）默认均为自适应内容；
        -->
        <linear xdef:name="XuiComponentLayoutLinear"
                xdef:bean-implements-types="io.crazydan.duzhou.framework.ui.schema.XuiLayout"
                xdef:value="!string" xdef:bean-body-prop="value"
                xdef:bean-tag-prop="$type" />
    </xdef:define>

    <xdef:define xdef:name="XuiComponentStyle" xdef:ref="XuiComponentNamed">
    </xdef:define>

    <!-- 消息派发器：监听组件内的交互事件（原生视图元素的事件或组件自定义事件）并派发业务消息给当前组件

    @on 事件名称，如 `click`、`input` 等；
    @for 消息类型，如 `User_Login_Start`、`User_Login_Finish` 等；
    @data 消息所携带的数据，以 `${xxx}` 形式构造数据，并可通过 `$event` 引用事件对象上的数据；
    -->
    <xdef:define xdef:name="XuiComponentMessageDispatch" xdef:ref="XuiComponentNamed"
                 on="!conf-name" for="!conf-name" data="any"
    />
</template>
