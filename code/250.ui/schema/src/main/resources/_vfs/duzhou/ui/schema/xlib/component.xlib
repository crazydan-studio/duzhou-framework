<?xml version="1.0" encoding="UTF-8" ?>

<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c" xmlns:xpl="xpl"
     xmlns:thisLib="thisLib"
     x:schema="/nop/schema/xlib.xdef"
>
    <tags>
        <DefaultGenExtends outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
                <thisLib:_NormalizeProps />
            </source>
        </DefaultGenExtends>

        <DefaultPostExtends outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
                <thisLib:_NormalizeNativeComponents />
            </source>
        </DefaultPostExtends>

        <!-- 处理 Native 组件 -->
        <_NormalizeNativeComponents outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
                <c:script><![CDATA[
                    import io.nop.commons.util.StringHelper;

                    const innerComponents = [
                        'Text', 'Validation', 'Animation',
                    ];
                    const toCode = (s) => StringHelper.camelCaseToUnderscore(s, true);
                ]]></c:script>

                <!-- Note: xpl:is 中必须是动态表达式才会在运行时输出，否则，变量名会被作为标签直接输出 -->
                <_ xpl:is="${_dsl_root.tagName}">
                    <c:for var="cmp" items="${innerComponents}">
                        <import xpl:if="_dsl_root.findByTag(cmp) != null"
                                as="${cmp}"
                                from="native:${toCode(cmp)}"
                        />
                    </c:for>

                    <!-- Note: 确保 import 指令插入到 props 标签之前 -->
                    <props />
                </_>
            </source>
        </_NormalizeNativeComponents>

        <!-- 处理 props/state -->
        <_NormalizeProps outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
                <c:script><![CDATA[
                    const props = _dsl_root.childByTag('props');
                    const state = _dsl_root.childByTag('state');
                ]]></c:script>

                <!-- Note: xpl:is 中必须是动态表达式才会在运行时输出，否则，变量名会被作为标签直接输出 -->
                <_ xpl:is="${_dsl_root.tagName}">
                    <props xpl:if="props != null">
                        <thisLib:_ExpandObjMetaForProps props="${props.getChildren()}" />
                    </props>
                    <state xpl:if="state != null">
                        <thisLib:_ExpandObjMetaForProps props="${state.getChildren()}" />
                    </state>
                </_>
            </source>
        </_NormalizeProps>

        <!-- 展开 props 中的 obj-meta -->
        <_ExpandObjMetaForProps outputMode="node">
            <attr name="props" type="List&lt;io.nop.core.lang.xml.XNode>" />

            <source>
                <c:for var="prop" items="${props}">
                    <c:script><![CDATA[
                        const objMetaPath = prop.getAttr('obj-meta');
                        const canBeExpanded =
                                    objMetaPath != null
                                    && prop.getAttr('type') == null
                                    && !prop.hasChild();
                        if (canBeExpanded) {
                            prop.removeAttr('obj-meta');
                        }
                    ]]></c:script>

                    <!-- Note: xpl:is 中必须是动态表达式才会在运行时输出，否则，变量名会被作为标签直接输出 -->
                    <_ xpl:is="${prop.tagName}" xpl:if="canBeExpanded">
                        <thisLib:_ExpandObjMetaToProp
                                objMetaPath="${objMetaPath}"
                        />
                    </_>
                </c:for>
            </source>
        </_ExpandObjMetaForProps>

        <!-- 将 obj-meta 展开到 prop 中 -->
        <_ExpandObjMetaToProp outputMode="node">
            <attr name="objMetaPath" type="String" />

            <source>
                <c:script><![CDATA[
                    import io.nop.core.resource.VirtualFileSystem;
                    import io.nop.xlang.xdsl.DslNodeLoader;

                    const resource = VirtualFileSystem.instance().getResource(objMetaPath);
                    const node = DslNodeLoader.INSTANCE.loadFromResource(resource).getNode();
                    const propsNode = node.childByTag('props');
                    const propNodes = propsNode?.childrenByTag('prop');
                ]]></c:script>

                <c:for xpl:if="propNodes != null"
                       var="prop" items="${propNodes}"
                >
                    <c:script><![CDATA[
                        const schemaNode = prop.childByTag('schema');
                        const type = schemaNode?.getAttr('type') || prop.getAttr('type');
                        const propAttrs = {
                            type,
                            defaultValue: null,
                        };
                    ]]></c:script>

                    <_ xpl:is="${prop.getAttr('name')}"
                       xpl:if="type != null"
                       xpl:attrs="propAttrs"
                    >
                        <!-- TODO 处理递归展开 objMeta -->
                    </_>
                </c:for>
            </source>
        </_ExpandObjMetaToProp>
    </tags>
</lib>
