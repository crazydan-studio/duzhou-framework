<?xml version="1.0" encoding="UTF-8" ?>

<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef" xmlns:xpl="xpl" xmlns:c="c"
     x:schema="/nop/schema/xlib.xdef"
>
    <tags>
        <DefaultGenExtends outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
            </source>
        </DefaultGenExtends>

        <DefaultPostExtends outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
            </source>
        </DefaultPostExtends>

        <_NormalizeStyles outputMode="node">
            <attr name="_dsl_root" implicit="true" />

            <source>
                <c:script><![CDATA[
                    const styles = _dsl_root.findChildren(
                        node => !node.getTagName().equals('style')
                                && node.getTagName().indexOf(':') < 0
                    );
                ]]></c:script>
                <styles>
                    <c:for var="style" items="${styles}">
                        <c:script><![CDATA[
                            import java.util.LinkedHashMap;

                            const children = style.detachChildren();

                            const attrs = new LinkedHashMap<>();
                            for (let entry of style.getAttrs().entrySet()) {
                                const name = entry.getKey();
                                const value = entry.getValue();

                                if (name.indexOf(':') < 0) {
                                    attrs.put(name, value);
                                }
                            }

                            style.removeAttrsIf((name, vl) => name.indexOf(':') < 0);
                            style.remove();

                            //logInfo('style: {}', style.xml());
                        ]]></c:script>
                        <style name="${style.getTagName()}">
                            <c:for var="attr" items="${attrs.entrySet()}">
                                <c:script><![CDATA[
                                    import io.nop.commons.util.StringHelper;

                                    const name = attr.getKey();
                                    const value = StringHelper.emptyAsNull(
                                        StringHelper.toString(attr.getValue(), null)
                                    );
                                ]]></c:script>
                                <attr xpl:if="!style.hasAttr(name)"
                                      name="${name}" type="${value}"
                                />
                            </c:for>
                            <source>
                            </source>
                        </style>
                    </c:for>
                </styles>
            </source>
        </_NormalizeStyles>
    </tags>
</lib>
