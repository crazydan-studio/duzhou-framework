<?xml version="1.0" encoding="UTF-8" ?>

<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的应用生产平台
  - Copyright (C) 2025 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<component xmlns:x="/nop/schema/xdsl.xdef" xmlns:xpl="xpl" xmlns:xui="xui"
           x:schema="/duzhou/ui/schema/component.xdef"
>
    <x:gen-extends xmlns:component="component">
        <component:DefaultGenExtends xpl:lib="/duzhou/ui/schema/xlib/component.xlib" />
    </x:gen-extends>
    <x:post-extends xmlns:component="component">
        <component:DefaultPostExtends xpl:lib="/duzhou/ui/schema/xlib/component.xlib" />
    </x:post-extends>

    <import as="Form" from="/duzhou/ui/test/form/form.xui" />
    <import as="Input" from="/duzhou/ui/test/form/input.xui" />
    <import as="Button" from="/duzhou/ui/test/form/button.xui" />
    <import as="Mask" from="/duzhou/ui/test/form/mask.xui" />
    <import as="Checkbox" from="/duzhou/ui/test/form/checkbox.xui" />
    <import as="Link" from="/duzhou/ui/test/form/link.xui" />
    <import as="Image" from="/duzhou/ui/test/form/image.xui" />

    <props>
    </props>

    <state>
        <loginInfo>
            <username>
                <!-- 以下为需要启用数据校验的模型结构 -->
                <value type="string" />
                <!-- 获取该值时，将调用所在对象的 xui:validation 对值进行校验并返回校验结果 -->
                <valid type="boolean" />

                <!-- 配置校验规则和提示信息，支持变更时实时检查并设置校验结果 -->
                <xui:validation x:name="length-validation" required="true" maxLength="15">
                    <msg>帐号不能为空，且长度小于 15 个字符</msg>
                </xui:validation>
                <xui:validation x:name="form-validation" regex="^[a-z0-9]+$">
                    <msg>帐号只能为字符、数字的组合</msg>
                </xui:validation>
            </username>
            <password>
                <value type="string" />
                <valid type="boolean" />

                <xui:validation x:name="length-validation" minLength="8" maxLength="15">
                    <msg>密码不能为空，且长度不低于 8 位，不高于 15 位</msg>
                </xui:validation>
                <xui:validation x:name="form-validation"
                                regex="^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^*,\._])[0-9a-zA-Z!@#$%^*,\\._]{8,15}$">
                    <msg>密码必须包含大小写字母、特殊字符和数字</msg>
                </xui:validation>
            </password>
        </loginInfo>
    </state>

    <template>
        <xui:layout>
            <linear><![CDATA[
                // 整体处于上层容器的中心位置
                v>{
                    >[login-logo]<
                    <[login-form]>
                }<^
            ]]></linear>
        </xui:layout>

        <Image xui:name="login-logo" src="/logo.svg" />
        <!-- Form 的 disabled 属性会逐级传导到其内部的 Input、Button 等支持启用/禁用的组件 -->
        <Form xui:name="login-form" disabled="${state.loginWaiting.enabled}">
            <xui:layout>
                <linear><![CDATA[
                    // 通过表格对齐输入组件
                    | [username-label]> | <[username-input]> |
                    | [password-label]> | <[password-input]> |
                    |                   | <[remember-me-input] |

                    >[warning-text]<

                    <[login-button]>
                    [forgot-password-button] <> [register-button]
                ]]></linear>
            </xui:layout>

            <!-- Mask 负责在父节点的最上层显示遮罩，其自动覆盖整个父节点的显示空间 -->
            <Mask xui:name="waiting-mask" xui:when="${state.loginWaiting.enabled}">
                <Text xui:name="waiting-mask-text">${state.loginWaiting.msg}</Text>
            </Mask>

            <!-- 根据校验模型的校验结果，以红色边框和浮动提示方式标记校验失败的输入区域 -->
            <!-- 仅在目标的值 value 发生变化时才根据校验结果显示提示信息，其余状态则不做处理 -->
            <Validation xui:name="username-validation" target="state.loginInfo.username">
                <Text xui:name="username-label">帐号：</Text>
                <Input xui:name="username-input" type="text">
                    <!-- 等价于 xui:bind-value="loginInfo.username.value"，用于简化对输入数据变更的监听 -->
                    <xui:dispatch on="input"
                                  for="On_Input_for_state_loginInfo_username_value"
                                  data="${$event.value}" />
                </Input>
            </Validation>

            <Validation xui:name="password-validation" target="state.loginInfo.password">
                <Text xui:name="password-label">密码：</Text>
                <Input xui:name="password-input" type="secret"
                       xui:bind-value="loginInfo.password.value" />
            </Validation>

            <Animation xui:name="remember-me-animation">
                <Checkbox xui:name="remember-me-input">
                    <Text xui:name="label">保持登录？</Text>
                </Checkbox>
            </Animation>

            <xui:when xui:name="when-show-login-error" cond="${state.loginError.enabled}">
                <Animation xui:name="warning-text-animation" enter="fade-in" exit="fade-out">
                    <Text xui:name="warning-text" color="warning">
                        ${state.loginError.msg}
                    </Text>
                </Animation>
            </xui:when>

            <Button xui:name="login-button"
                    disabled="${!state.loginInfo.username.valid
                    || !state.loginInfo.password.valid}"
            >
                <Text xui:name="label">登录</Text>

                <xui:dispatch on="click" for="User_Login_Start"
                              data="${{
                               username: state.loginInfo.username.value,
                               password: state.loginInfo.password.value}}"
                />
            </Button>
            <Link xui:name="forgot-password-button" target="${props.forgotUrl}">
                <Text xui:name="label">忘记密码？</Text>
            </Link>
            <Link xui:name="register-button" target="${props.registerUrl}">
                <Text xui:name="label">注册帐号</Text>
            </Link>
        </Form>
    </template>

    <!-- 逻辑层只用处理消息，而无需关注消息如何触发和发送；视图层只用发送消息，而无需调用函数 -->
    <messages>
        <!-- 每个消息均由唯一的 type 表示，并以 data 作为负载数据的引用名字 -->
        <message type="User_Login_Start">
        </message>

        <message type="On_Input_for_state_loginInfo_username_value">
            <state>
                <loginInfo.username.value>${value}</loginInfo.username.value>
            </state>
        </message>
    </messages>
</component>
