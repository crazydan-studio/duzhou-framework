<?xml version="1.0" encoding="UTF-8" ?>
<!-- 根据应用信息生成指定的 Service 模块的工程代码 -->
<c:script xmlns:c="c"><![CDATA[
    import io.nop.core.resource.component.ResourceComponentManager;
    import io.nop.codegen.CodeGenConstants;

    // 设置生成代码放置目录，其位置相对于当前工程根目录
    const targetDir = codeGenerator.getTargetPath('./target/app');
    // 服务模块定义文件，其位置相对于该 xgen 脚本所在的目录
    const modelPath = codeGenerator.getTplPath('../model/duzhou-app-modeler.app-module.xlsx');
    const model = ResourceComponentManager.instance().loadComponentModel(modelPath);

    const app = model.app;
    const appModule = model.appModule;

    $scope.setLocalValue('app', {
        ...app,
        modules: [{
            ...appModule,
            ormModel: model
        }]
    });

    codeGenerator
        .withTargetDir(targetDir)
        .withTplDir('/duzhou/templates/app')
        .execute('/', $scope);

    // Note：在 app.orm.xml 中存在 x:post-extends 等后处理，
    // 故而，不能在生成 app.orm.xml 的时候生成 xmeta 和 orm 的 java class，
    // 因为，此时并不会执行 x:post-extends 的函数，导致部分 orm 配置还未展开
    const moduleId = appModule.id;
    const moduleDir = targetDir + '/' + appModule.maven.artifactId;
    const moduleOrmPath =
            moduleDir
            + '/orm/src/main/resources/_vfs/'
            + moduleId + '/orm/app.orm.xml';
    codeGenerator
        .withTargetDir(moduleDir + '/biz')
        .renderModel(
            moduleOrmPath,
            // 代码模板资源的 classpath 位置
            '/duzhou/templates/meta',
            // 以下参数保持不变
            '/', $scope
        );
    codeGenerator
        .withTargetDir(moduleDir + '/orm/src/main/java')
        .renderModel(
            moduleOrmPath,
            // 代码模板资源的 classpath 位置
            '/nop/templates/orm-entity',
            // 以下参数保持不变
            '/', $scope
        );
]]></c:script>
