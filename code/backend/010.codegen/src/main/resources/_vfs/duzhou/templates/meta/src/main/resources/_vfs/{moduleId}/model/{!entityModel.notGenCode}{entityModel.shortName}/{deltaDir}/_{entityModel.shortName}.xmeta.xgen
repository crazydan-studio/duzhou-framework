<?xml version="1.0" encoding="UTF-8" ?>
<c:unit xmlns:c="c" xmlns:gen="gen" xmlns:xpl="xpl"
        xpl:outputMode="text"
>

    <c:script><![CDATA[
        import io.nop.codegen.XCodeGenerator;

        let xplPath =
            '/nop/templates/meta/src/main/resources'
            + '/_vfs/{moduleId}/model/{!entityModel.notGenCode}{entityModel.shortName}'
            + '/{deltaDir}/_{entityModel.shortName}.xmeta.xgen';
        let xpl = XCodeGenerator.loadTpl(xplPath);
        let targetNode = xpl.generateToNode($scope);
    ]]></c:script>

    <gen:DeltaMerge targetNode="${targetNode}" xpl:return="metaNode"
                    xpl:lib="/nop/codegen/xlib/gen.xlib">
        <meta>
            <props>
                <!-- json 字段不暴露给前端（直接移除），采用 alias 方式屏蔽内部结构 -->
                <c:for var="col" items="${entityModel.columns}">
                    <c:script><![CDATA[
                        let colComp = entityModel.getComponent(col.name + "Component");
                        let jsonCol = colComp != null && colComp.className.$simpleClassName() == 'JsonOrmComponent'
                    ]]></c:script>
                    <c:if test="${jsonCol}">
                        <prop name="${col.name}" x:override="remove" />
                    </c:if>
                </c:for>
                <!-- JsonOrmComponent 不暴露给前端（直接移除），采用 alias 方式屏蔽内部结构 -->
                <c:for var="comp" items="${entityModel.components}">
                    <c:script><![CDATA[
                        if(comp.tagSet?.contains('not-gen')) continue;
                        const jsonComp = comp.className.$simpleClassName() == 'JsonOrmComponent';
                    ]]></c:script>
                    <c:if test="${jsonComp}">
                        <prop name="${comp.name}" x:override="remove" />
                    </c:if>
                </c:for>

                <c:for var="alias" items="${entityModel.aliases}">
                    <c:script><![CDATA[
                        if(alias.tagSet?.contains('not-gen')) continue;

                        const queryable = alias.tagSet?.contains('pub');
                        // 对 json 字段，需显式设置 graphql:type="[Map]"
                        // 才能在前后端直接交换 JSON 对象，否则，只能交换字符串
                        const jsonAlias = alias.propPath.endsWith('JsonTextComponent.data');
                    ]]></c:script>
                    <prop name="${alias.name}" queryable="${queryable}"
                          graphql:type="${jsonAlias ? '[Map]' : null}">
                        <c:if test="${jsonAlias}">
                            <schema x:override="remove" />
                        </c:if>
                    </prop>
                </c:for>
            </props>
        </meta>
    </gen:DeltaMerge>

    ${metaNode.outerXml(false, false)}
</c:unit>
